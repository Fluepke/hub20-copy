x-hub20: &backend_service
  image: "hub20:${TAG-latest}"
  build:
    context: .
  restart: unless-stopped
  depends_on:
    redis:
      condition: service_healthy
    db:
      condition: service_healthy
    ethereum:
      condition: service_healthy

services:
  db:
    image: postgres:latest
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${HUB20_DATABASE_NAME:-hub20}"]
      interval: 5s
      retries: 5
    restart: unless-stopped

    # Make sure if to match the HUB20_DATABASE_* variables defined above
    environment:
      POSTGRES_DB: "${HUB20_DATABASE_NAME:-hub20}"
      POSTGRES_USER: "${HUB20_DATABASE_USER:-hub20}"
      POSTGRES_PASSWORD: "${HUB20_DATABASE_PASSWORD:-hub20_pass}"

  # Redis for cache, session engine, celery and channels transport
  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: unless-stopped

  # services that run off the base image
  # Admin backend
  admin:
    <<: *backend_service
    environment:
      HUB20_URLCONF_MODULE: hub20.admin.urls

    command: >
      /bin/bash -c '
        django-admin collectstatic --noinput
        uvicorn hub20.api.asgi:application --port 80 --host 0.0.0.0 --reload --reload-dir /app/hub20
      '

  # Web API
  web:
    <<: *backend_service
    command: >
      /bin/bash -c '
        django-admin migrate;
        django-admin collectstatic --noinput
        uvicorn hub20.api.asgi:application --port 80 --host 0.0.0.0 --reload --reload-dir /app/hub20
      '

  # Celery app
  celery:
    <<: *backend_service
    command: celery -A hub20.api worker -l info

  # Celery beat (periodic tasks)
  celery_beat:
    <<: *backend_service
    command: celery -A hub20.api beat -l info -S django

  # Background command to listen to blockchain and raiden events
  job_listen_events:
    <<: *backend_service
    command: django-admin run_event_streams
